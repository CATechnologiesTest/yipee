import { TestBed } from '@angular/core/testing';
import { AppInfo } from './AppInfo';

describe('AppInfo', () => {

  const flat1 = {
    'type': 'app-info',
    'logo': '[insert name of app logo image here]',
    'name': 'YipeeAtHome',
    'readme': '# Steps and sections for setting up and running the YipeeAtHome application\n  - Set up Oauth on GitHub\n  - Setup and run YipeeAtHome using docker compose\n  - Setup and run YipeeAtHome using docker swarm\n\n# Set up Oauth on GitHub\n\n1. Login to GitHub with your user ID and go to the settings page by clicking your logo \nat the top right of the page.\n2. Click on developer settings on the bottom of the left side bar.\n3. Click new Oauth application on the top right. (In the middle if first Oauth application)\n4. Fill out the form.\n  * Application Name = What you want to call this application. (recommended: YipeeAtHome)\n  * Homepage URL = Where you want the homepage to be. (recommended: http:\/\/localhost:8080)\n  * Application Description = Description of the application. (recommended: The YipeeAtHome application)\n  * Authorization Callback URL = http:\/\/localhost:8080\/#\/auth\n5. Click the green Register Application button on the bottom right once all fields are filled out.\n6. On the resulting page, there will be a Client ID and Client secret. Copy both of these values and save them. These will be needed later when starting and running the YipeeAtHome application.\n\n# Setup and run the YipeeAtHome application using docker compose\n\n1. Login to app.yipee.io and Download the V3compose file for the YipeeAtHome application. (Move the compose file to where you wish to run it from)\n2. Open a terminal and navigate to the directory where you put the downloaded YipeeAtHome file. (NOTE: When downloading the compose file, a number is inserted after the initial file name. This number corresponds to the version\/rev count. This means every download will be named differently.)\n3. Set the environment variables and start the YipeeAtHome application.\n##### Set the environment variables\n  - YIPEE_TEAM_OWNER = The GitHub ID of the user who will own the yipee team.\n  - CALLBACK_HOST = GitHub Oauth will return to this URL. Should match the host given for the Oauth application in GitHub.\n  - CLIENT_ID = This can be found in GitHub under the Oauth application created earlier.\n  - CLIENT_SECRET = This can be found in GitHub under the Oauth application created earlier.\n\n  ##### Start the YipeeAtHome application\n  - In the terminal type: `docker-compose -f ~\/ up -d`\n4. Open a browser and navigate to: `http:\/\/localhost:8080` or `localhost:8080`\n5. You should now have a running instance of the YipeeAtHome application.\n\n  ##### NOTE: There are 3 common ways of setting environment variables and starting the YipeeAtHome application.\n  1. Using the terminal you can type in all the environment variables and the docker command simultaneously.\n    - `YIPEE_TEAM_OWNER= CALLBACK_HOST= CLIENT_ID= CLIENT_SECRET= docker-compose -f ~\/ up -d`\n  2. Using the terminal you can export the environment variables, and then run the docker command seperately. As long as the window is not closed, the exported variables persist, and docker commands can be typed repeatedly.\n    - In the terminal type: `export YIPEE_TEAM_OWNER= export CALLBACK_HOST= export CLIENT_ID= export CLIENT_SECRET=` then press enter.\n    - In the terminal type: `docker-compose -f ~\/ up -d` then press enter.\n  3. Create a bash script that sets the variables and starts the YipeeAtHome application.\n    - Below is the example bash script. It is run from the terminal by typing bash YipeeAtHome.sh. (YipeeAtHome.sh is the name of the bash file)\n```\n#!\/bin\/bash\nYIPEE_TEAM_OWNER=\nCALLBACK_HOST=\nCLIENT_ID=\nCLIENT_SECRET= \ndocker-compose -f ~\/ up -d\n```\n\n# Setup and run the YipeeAtHome application using docker swarm\n\n1. Login to app.yipee.io and Download the V3compose file for the YipeeAtHome application. (Move the compose file to where you wish to run it from)\n2. Open a terminal and navigate to the directory where you put the downloaded YipeeAtHome file. (NOTE: When downloading the compose file, a number is inserted after the initial file name. This number corresponds to the version\/rev count. This means every download will be named differently.)\n3. Set the environment variables and start the YipeeAtHome application.\n##### Set the environment variables\n  - YIPEE_TEAM_OWNER = The GitHub ID of the user who will own the yipee team.\n  - CALLBACK_HOST = GitHub Oauth will return to this URL. Should match the host given for the Oauth application in GitHub.\n  - CLIENT_ID = This can be found in GitHub under the Oauth application created earlier.\n  - CLIENT_SECRET = This can be found in GitHub under the Oauth application created earlier.\n\n  ##### Start the YipeeAtHome application\n  - In the terminal type: `docker swarm init` (this puts your docker engine into single-node swarm mode)\n  - In the terminal type: `docker stack deploy -c  `\n4. Open a browser and navigate to: `http:\/\/localhost:8080` or `localhost:8080`\n5. You should now have a running instance of the YipeeAtHome application.\n\n  ### NOTE: There are 3 common ways of setting environment variables and starting the YipeeAtHome application.\n  1. Using the terminal you can type in all the environment variables and the docker command simultaneously.\n    - `YIPEE_TEAM_OWNER= CALLBACK_HOST= CLIENT_ID= CLIENT_SECRET= docker swarm init docker stack deploy -c  `\n  2. Using the terminal you can export the environment variables, and then run the docker command seperately. As long as the window is not closed, the exported variables persist, and docker commands can be typed repeatedly.\n    - In the terminal type: `export YIPEE_TEAM_OWNER= export CALLBACK_HOST= export CLIENT_ID= export CLIENT_SECRET=` then press enter.\n    - In the terminal type: `docker swarm init docker stack deploy -c  `\n  3. Create a bash script that sets the variables and starts the YipeeAtHome application.\n    - Below is the example bash script. It is run from the terminal by typing bash YipeeAtHome.sh. (YipeeAtHome.sh is the name of the bash file)\n```\n#!\/bin\/bash\nYIPEE_TEAM_OWNER=\nCALLBACK_HOST=\nCLIENT_ID=\nCLIENT_SECRET= \ndocker swarm init\ndocker stack deploy -c  \n```',
    'description': '[insert app description here]',
    'id': 'd34b9bc1-d772-411b-8936-deccb6e1b997'
  };

  it('should handle round trip', () => {
    const a1 = AppInfo.construct(AppInfo.OBJECT_NAME) as AppInfo;
    a1.fromFlat(flat1);
    expect(a1.toFlat()).toEqual(flat1);
  });

});
